---
AWSTemplateFormatVersion: '2010-09-09'
Description: 'Continuous Delivery pipeline for static website'
Parameters:
  GitHubOwner:
    Description: 'The owner of the GitHub repository.'
    Type: String
  GitHubOAuthToken:
    Description: 'The OAuthToken of the GitHub user.'
    Type: String
  GitHubRepo:
    Description: 'The GitHub repository.'
    Type: String
  EC2InstancePublicDnsName:
    Description: 'The VPC Id to launch the EC2 instance in.'
    Type: String

Resources:
  ArtifactStore:
    Type: "AWS::S3::Bucket"
    Properties: 
      VersioningConfiguration:
        Status: Enabled
  CodePipelineIAMRole:
    Type: 'AWS::IAM::Role'
    Properties:
      AssumeRolePolicyDocument:
        Version: '2012-10-17'
        Statement:
        - Effect: Allow
          Principal:
            Service:
            - 'codepipeline.amazonaws.com'
          Action:
          - 'sts:AssumeRole'
      Path: '/'
      Policies:
      - PolicyName: logs
        PolicyDocument:
          Version: '2012-10-17'
          Statement:
          - Action:
            - s3:GetObject
            - s3:GetObjectVersion
            - s3:GetBucketVersioning
            Resource: "*"
            Effect: Allow
          - Action:
            - s3:PutObject
            Resource:
            - arn:aws:s3:::codepipeline*
            - arn:aws:s3:::elasticbeanstalk*
            Effect: Allow
          - Action:
            - codecommit:CancelUploadArchive
            - codecommit:GetBranch
            - codecommit:GetCommit
            - codecommit:GetUploadArchiveStatus
            - codecommit:UploadArchive
            Resource: "*"
            Effect: Allow
          - Action:
            - codedeploy:CreateDeployment
            - codedeploy:GetApplicationRevision
            - codedeploy:GetDeployment
            - codedeploy:GetDeploymentConfig
            - codedeploy:RegisterApplicationRevision
            Resource: "*"
            Effect: Allow
          - Action:
            - elasticbeanstalk:*
            - ec2:*
            - elasticloadbalancing:*
            - autoscaling:*
            - cloudwatch:*
            - s3:*
            - sns:*
            - cloudformation:*
            - rds:*
            - sqs:*
            - ecs:*
            - iam:PassRole
            - codebuild:*
            Resource: "*"
            Effect: Allow
          - Action:
            - lambda:InvokeFunction
            - lambda:ListFunctions
            Resource: "*"
            Effect: Allow
          - Action:
            - opsworks:CreateDeployment
            - opsworks:DescribeApps
            - opsworks:DescribeCommands
            - opsworks:DescribeDeployments
            - opsworks:DescribeInstances
            - opsworks:DescribeStacks
            - opsworks:UpdateApp
            - opsworks:UpdateStack
            Resource: "*"
            Effect: Allow

  CodeBuildProject:
    Type: AWS::CodeBuild::Project
    Properties:
      Name: test
      ServiceRole: !Ref CodeBuildRole
      Artifacts:
        Type: CODEPIPELINE
      Source:
        Type: CODEPIPELINE
        BuildSpec: |
          version: 0.2
          phases:
            pre_build:
              commands:
                - apt-get install zip unzip -y
                - echo "Build Start"
            build:
              commands:
                - ls -lrth
          artifacts:
            files: 
            - index.html
            - appspec.yml
            - scripts/*
      Environment:
        ComputeType: BUILD_GENERAL1_SMALL
        Image: 'aws/codebuild/standard:4.0'
        Type: LINUX_CONTAINER
      
  CodeBuildRole:
    Type: AWS::IAM::Role
    Properties: 
      Path: /
      RoleName: "codebuild-test"
      AssumeRolePolicyDocument: 
        Statement:
          - Effect: "Allow"
            Principal: 
              Service: "codebuild.amazonaws.com"
            Action:
              - "sts:AssumeRole"
      Policies: 
        - PolicyName: "codebuild-tes"
          PolicyDocument:
            Statement:
              - Effect: "Allow"
                Resource: "*"
                Action:
                  - "logs:CreateLogGroup"
                  - "logs:CreateLogStream"
                  - "logs:PutLogEvents"
              - Effect: "Allow"
                Resource: 
                  - !Sub "arn:aws:s3:::*"
                Action:
                  - "s3:GetObject"
                  - "s3:GetObjectVersion"
                  - "s3:PutObject"

  CodePipeline:
    Type: "AWS::CodePipeline::Pipeline"
    Properties:
      ArtifactStore:
        Location: !Ref ArtifactStore
        Type: S3
      RoleArn: !Sub '${CodePipelineIAMRole.Arn}'
      Stages:
        - Name: Source
          Actions: 
          - Name: Source
            ActionTypeId:
              Category: Source 
              Owner: ThirdParty 
              Version: 1 
              Provider: GitHub
            OutputArtifacts:
            - Name: Source
            Configuration:
              Owner: !Ref GitHubOwner
              Repo: !Ref GitHubRepo
              Branch: awsl2
              OAuthToken: !Ref GitHubOAuthToken
        - Name: Build
          Actions:
            - Name: Build
              InputArtifacts:
                - Name: Source
              ActionTypeId: 
                Category: Build
                Owner: AWS
                Version: 1
                Provider: CodeBuild
              OutputArtifacts:
                - Name: Build
              Configuration: 
                ProjectName: !Ref CodeBuildProject
        - Name: Deploy
          Actions:
          - Name: Deploy
            ActionTypeId:
              Category: Deploy 
              Owner: AWS 
              Version: 1 
              Provider: CodeDeploy
            InputArtifacts:
            - Name: Build
            Configuration:
              ApplicationName: !Ref Application
              DeploymentGroupName: !Ref DeploymentGroup
        - Name: Test
          Actions:
          - Name: Test
            ActionTypeId:
              Category: Invoke 
              Owner: AWS 
              Version: 1 
              Provider: Lambda
            Configuration:
              FunctionName: !Ref TestLambda
              UserParameters: !Ref EC2InstancePublicDnsName

  CodeDeployIAMRole:
    Type: 'AWS::IAM::Role'
    Properties:
      AssumeRolePolicyDocument:
        Version: '2012-10-17'
        Statement:
        - Effect: Allow
          Principal:
            Service:
            - 'codedeploy.amazonaws.com'
          Action:
          - 'sts:AssumeRole'
      Path: '/'
      ManagedPolicyArns:
      - 'arn:aws:iam::aws:policy/service-role/AWSCodeDeployRole'
  Application:
    Type: "AWS::CodeDeploy::Application"
  DeploymentGroup:
    Type: "AWS::CodeDeploy::DeploymentGroup"
    Properties:
      ApplicationName: !Ref Application
      Ec2TagFilters:
        - Key: DeploymentGroup
          Type: KEY_AND_VALUE
          Value: !Ref AWS::StackName
      ServiceRoleArn: !Sub '${CodeDeployIAMRole.Arn}'

  LambdaIAMRole:
    Type: 'AWS::IAM::Role'
    Properties:
      AssumeRolePolicyDocument:
        Version: '2012-10-17'
        Statement:
        - Effect: Allow
          Principal:
            Service:
            - 'lambda.amazonaws.com'
          Action:
          - 'sts:AssumeRole'
      Path: '/'
      ManagedPolicyArns:
      - 'arn:aws:iam::aws:policy/service-role/AWSLambdaBasicExecutionRole'
      Policies:
      - PolicyName: codepipeline
        PolicyDocument:
          Version: '2012-10-17'
          Statement:
          - Action:
            - codepipeline:PutJobFailureResult
            - codepipeline:PutJobSuccessResult
            Resource: "*"
            Effect: Allow
  TestLambda:
    Type: "AWS::Lambda::Function"
    Properties: 
      Code:
        ZipFile: |
          var AWS = require('aws-sdk');
          var http = require('http');
          exports.handler = function(event, context) {
            var codepipeline = new AWS.CodePipeline();
            var job = event["CodePipeline.job"]
            var jobId = job.id;
            var url = "http://" + job.data.actionConfiguration.configuration.UserParameters; 
            function success(message) {
              codepipeline.putJobSuccessResult({
                jobId: jobId
              }, function(err, data) {
                if(err) {
                  context.fail(err);    
                } else {
                  context.succeed(message);    
                }
              });
            }
            function failure(message) {
              codepipeline.putJobFailureResult({
                jobId: jobId,
                failureDetails: {
                  message: JSON.stringify(message),
                  type: 'JobFailed',
                  externalExecutionId: context.invokeid
                }
              }, function(err, data) {
                if(err) {
                  context.fail(err);    
                } else {
                  context.succeed(message);    
                }
              });
            }
            http.get(url, function(response) {
              var body = '';
              response.on('data', function (chunk) {
                body += chunk;
              });
              response.on('end', function () {
                if (response.statusCode === 200) {
                  success("URL check successful.")
                } else {
                  console.log(response.statusCode);
                  console.log8(body);
                  failure("Invalid status code or content.");
                }
              });
            }).on('error', function(error) {
              failure(error);  
            });
          };
      FunctionName: 'codepipeline_http_test'
      Handler: 'index.handler'
      MemorySize: 128
      Role: !Sub '${LambdaIAMRole.Arn}'
      Runtime: 'nodejs12.x'
      Timeout: 30